#!/usr/bin/env python3

import ijson.backends.yajl2 as ijson
from subprocess import Popen, PIPE
import json
import sys
from threading import Thread
from k5dstatus.utils import get_manager, get_block

k5dstatus = get_manager()

config = k5dstatus.GetConfig('other-statuslines')
statuslines = config.get('statuslines', ['i3status -c ~/.i3/i3status.conf'])

if 'statuslines' in config:
    if isinstance(config, str):
        statuslines = [config]
    if isinstance(config, list):
        statuslines = config


class OtherStatusline(Thread):
    def __init__(self, statusline_path):
        super().__init__()
        self.statusline_path = statusline_path

    def run(self):
        with Popen(self.statusline_path, stdout=PIPE, shell=True) as proc:
            header = json.loads(str(proc.stdout.readline(), 'UTF-8'))

            if header['version'] != 1:
                print('other-statuslines: invalid status header', sys.stderr)
                return

            parser = ijson.common.items(ijson.parse(proc.stdout, buf_size=1), 'item')

            for blocks in parser:
                for block in blocks:
                    blkpath = k5dstatus.FindOrCreateBlock(block['name'], block.get('instance', ''))
                    blk = get_block(blkpath)
                    blk.Update(block)


for statusline in statuslines:
    OtherStatusline(statusline).start()
